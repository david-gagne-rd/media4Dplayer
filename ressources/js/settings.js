var Settings = {
	parentalControl:{},
	generate:{}
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Resets the settings template
 * @param {Integer} rubric The rubric's name of the section
 */

Settings.reset = function(rubric){
	
	// Vide le container
	$(document.getElementById("settings-rubrics-container")).attr("class", rubric).empty();
	
	// Masque le loader
	this.hideLoader();
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Launches the initializing and the loading of a rubric of the settings's section
 * @param {Object} params The request's parameters
 * @param {String} section The section's name
 * @param {Object} callbackList Contains a success and error callback
 * @param {Integer} rubric The rubric's name of the section
 */

Settings.load = function(params, section, callbackList, rubric){
	
	if(typeOf(callbackList) === "object"){
		
		this.reset(rubric);
		
		this.show();
		
		var name = function(userDetails){
			return (userDetails.firstName || "") + " " + (userDetails.lastName || "");
		}(User.data.userDetails);
		
		// Si je veux afficher la rubrique Control parental (aucune requete n'est necessaire)
		if(rubric === Section.rubrics[section][0]){
			Settings.generate.parentalRating(name, User.data.userDetails, Config.thresholds, callbackList);
		
		// Si je veux afficher la rubrique Account (aucune requete n'est necessaire)
		}else if(rubric === Section.rubrics[section][3]){
			Settings.generate.account(User.data.userDetails, callbackList);
			
		}else{
			
			Navigation.blockNavigation = true;
			this.showLoader();
			
			API.getWSForASetting(Model.getWSForASetting(rubric, params), rubric, function(data){
				Settings.load.callback(name, data, section, rubric, callbackList);
			});
		}
	}
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Processes the data received by the model of the settings section
 * @param {String} name The user's name
 * @param {Object} data Data generated by the model
 * @param {String} section The section's name
 * @param {Integer} rubric The rubric's name of the section
 * @param {Object} callbackList Contains a success and error callback
 */

Settings.load.callback = function(name, data, section, rubric, callbackList){
			
	Settings.hideLoader();
	Navigation.blockNavigation = false;
	
	if(typeOf(data) === "object"){
		
		// Si je veux afficher la rubrique Payement
		if(rubric === Section.rubrics[section][1]){
			Settings.generate.payment(name, data);
		
		// Si je veux afficher la rubrique Devices
		}else if(rubric === Section.rubrics[section][2]){
			Settings.generate.devices(name, data.list);
		}

		if(typeOf(callbackList.onSuccess) === "function"){
			callbackList.onSuccess();
		}

	}else{
		Settings.showErrorpopup(callbackList);
	}
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Generates the parental rating rubric of the settings section
 * @param {String} name The user's name
 * @param {Object} userDetails The user's data
 * @param {Array} thresholds Thresholds list
 * @param {Object} callbackList Contains a success and error callback
 */

Settings.generate.parentalRating = function(name, userDetails, thresholds, callbackList){
		
	if(typeOf(userDetails) === "object" && typeOf(thresholds) === "array" && thresholds.length){
		
		var threshold = getThreshold(thresholds, userDetails.settings.parentalControl);
		var _generatesThresholds = function(list, threshold){
			var html = "";
			if(typeOf(list) === "array" && list.length){
				
				var i, l = list.length;
				for(i=0;i<l;i++){
					
					html += threshold && list[i].value === threshold.value ? '<div class="threshold selected '+list[i].className+'"><div class="selector"></div></div>' : '<div class="threshold '+list[i].className+'"><div class="selector"></div></div>';
				}
			}
			return html;
		};
		
		$(document.getElementById("settings-rubrics-container")).append('<div id="user-name">'+name+'</div><div id="parental-control-label"><span class="title">'+LANG.getStr("parental_control")+' :</span> <span class="value"></span></div><div id="thresholds">'+_generatesThresholds(thresholds, threshold)+'</div>');
		
		Settings.updateParentalControlText(threshold);
		
		if(typeOf(callbackList.onSuccess) === "function"){
			callbackList.onSuccess();
		}		
	}
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Generates the payment rubric of the settings section
 * @param {String} name The user's name
 * @param {Object} data The subscription and payments data of the user
 */

Settings.generate.payment = function(name, data){
	var $container = $(document.getElementById("settings-rubrics-container"));
	if(typeOf(data) !== "object" || typeOf(data.subscription) !== "object" || !data.subscription.state){
		$container.append('<div id="user-name">'+name+'</div><div id="account-status"><div class="title">'+LANG.getStr("account_status_title")+'</div><div class="value">'+LANG.langData.errors.parentalControlScreen.notActiveCompte+'</div></div>');
		
	}else{
		var acpMsg = LANG.getMsg(LANG.getStr("account_status_msg"), "%s", '<span class="state">'+LANG.getStr(data.subscription.state)+'</span>')[1]+data.subscription.nextBillingDate;
		var paymentMethod = function(){
			var paymentPics = ["apay_visams","pay_dv","apay_paypal","viva","apay_etisalat_ww","apay_etisalat_ara"];
			if(data.payment.paymentType === "credit card" && data.payment.creditCard){
				return '<div id="payment-status"><div class="title">'+LANG.getStr("payment_status_title")+'</div><div class="value"><div>'+LANG.getStr("payment_status_message")+'</div><div id="payment-method-container"><img src="ressources/img/payments/'+paymentPics[0]+'.png"/><div id="credit-card">'+data.payment.creditCard.replace(/Last 4:/i, "**** **** ****")+'</div></div></div></div>';

			}else{
				var pic;
				if(data.payment.paymentMethod === "du"){
					pic = paymentPics[1];

				}else if(data.payment.paymentMethod === "paypal"){
					pic = paymentPics[2];

				}else if(data.payment.paymentMethod === "viva_bh"){
					pic = paymentPics[3];

				}else if(data.payment.paymentMethod === "etisalat_ae_week"){
					pic = (LANG.codeLang === "ar" ? paymentPics[5] : paymentPics[4]);
				}

				if(pic){
					return '<div id="payment-status"><div class="title">'+LANG.getStr("payment_status_title")+'</div><div class="value"><div>'+LANG.getStr("payment_status_message")+'</div><div id="payment-method-container"><img src="ressources/img/payments/'+pic+'.png"/></div></div></div>';				
				}
			}
			return "";
		}();

		$container.append('<div id="user-name">'+name+'</div><div id="account-status"><div class="title">'+LANG.getStr("account_status_title")+'</div><div class="value">'+acpMsg+'</div></div>' + paymentMethod);
	}
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Generates the devices rubric of the settings section
 * @param {String} name The user's name
 * @param {Array} list Devices list
 */

Settings.generate.devices = function(name, list){
	var acpMsg = "<div>" + LANG.getStr("devices_status_msg") + "</div>";
	var devicesList = function(){
		if(typeOf(list) === "array"){
			
			var htmlList = "", i, l = list.length, device, name = LANG.getStr("device_name"), key = LANG.getStr("device_key"), replacements;
			for(i=0;i<l;i++){
				device = list[i];
				replacements = device.type.replace("computer", "laptop").replace("phone", "mobile");
				htmlList += '<div class="device"><img src="ressources/img/devices/'+replacements+'.svg"/><div class="device-infos-container"><div class="device-type">'+(LANG.langData.devices[replacements] || device.type)+'</div><div class="oneline"><span class="title">'+name+'</span><span class="value">'+(device.name||"")+'</span></div><div class="oneline"><span class="title">'+key+'</span><span class="value">'+(device.publicKey||"")+'</span></div></div></div>';
			}
			return htmlList;
		}else{
			return "";
		}
	}();
	$(document.getElementById("settings-rubrics-container")).append('<div id="user-name">'+name+'</div><div id="devices"><div class="title">'+LANG.getStr("devices_status_title")+'</div><div class="value">'+acpMsg+'</div><div id="devices-list-container">'+devicesList+'</div></div>');
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Generates the account rubric of the settings section
 * @param {Object} userDetails The user's data
 * @param {Object} callbackList Contains a success and error callback
 */

Settings.generate.account = function(userDetails, callbackList){
	$(document.getElementById("settings-rubrics-container")).append('<img src="ressources/img/profile.svg"/><div id="first-name-label" class="label">'+LANG.getStr("firstNameLabel")+'</div><div id="first-name-value" class="value">'+userDetails.firstName+'</div><div id="last-name-label" class="label">'+LANG.getStr("lastNameLabel")+'</div><div id="last-name-value" class="value">'+userDetails.lastName+'</div><div id="email-label" class="label">'+LANG.getStr("email")+'</div><div id="email-value" class="value">'+decodeURIComponent(Login.email)+'</div><div class="btn-style-1 btn" id="logout-button"><span>'+LANG.getStr("logout_button")+'</span></div>');
		
	if(typeOf(callbackList.onSuccess) === "function"){
		callbackList.onSuccess();
	}
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Displays the parental control text of a threshold
 * @param {Object} threshold The threshold
 */

Settings.updateParentalControlText = function(threshold){
	if(typeOf(threshold) === "object"){
		$(document.getElementById("parental-control-label")).children(".value").text(threshold.label[LANG.codeLang]);
	}
};

/**
 * @author Johny EUGENE
 * @description Displays the settings's rubric loader
 */

Settings.showLoader = function(){
	$(document.getElementById("loader-account-container")).show();
};

/**
 * @author Johny EUGENE
 * @description Hides the settings's rubric loader
 */

Settings.hideLoader = function(){
	$(document.getElementById("loader-account-container")).hide();
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Displays the settings's rubric container
 */

Settings.show = function(){
	$(document.getElementById("settings")).show();
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Hides settings's rubric container
 */

Settings.hide = function(){
	$(document.getElementById("settings")).hide();
};

/**
 * @author Johny EUGENE (DOTSCREEN)
 * @description Displays an error popup
 * @param {Object} callbackList Contains a success and error callback
 */

Settings.showErrorpopup = function(callbackList){
	
	Popup.info.show({
		titleAndMsg:["", LANG.langData.errors.genericError],
		onBack:Popup.hideAll,
		buttons:[{
				title:LANG.getStr("ok"),
				onClick:Popup.hideAll
		}]
	});

	if(callbackList && typeOf(callbackList.onError) === "function"){
		callbackList.onError();
	}
};